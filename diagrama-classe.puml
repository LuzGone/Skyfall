@startuml
skinparam classAttributeIconSize 0
class MudancaPortao{
- voo : Voo
+ MudancaPortao(voo : Voo)
+ proximoStatus(status : Status) : void
+ confirmarVoo() : void
+ atrasarVoo(minutos : Long) : void
+ cancelarVoo() : void
+ finalizarVoo() : void
+ mudarPortao(novoPortao : String) : void
}
MudancaPortao ..|> Status
class Notificador{
- notificadorStrategy : NotificadorStrategy
+ setNotificadorStrategy(novoStrategy : NotificadorStrategy) : void
+ notificar(mensagem : String) : void
+ toString() : String
}
class Voo{
- codigo : Long
- passageiros : ArrayList<Cliente>
- status : Status
- origem : String
- destino : String
- portaoEmbarque : String
- data : LocalDateTime
- previsaoPartida : LocalDateTime
- previsaoChegada : LocalDateTime
- aeronave : Aeronave
- assentosDisponiveis : int
- assentosOcupados : int
+ Voo(origem : String, destino : String, portaoEmbarque : String, data : LocalDateTime, previsaoPartida : LocalDateTime, previsaoChegada : LocalDateTime, aeronave : Aeronave)
+ getCodigo() : Long
+ getStatus() : Status
+ getPortao() : String
+ getPrevisaoPartida() : LocalDateTime
+ getPrevisaoChegada() : LocalDateTime
+ getPassageiros() : ArrayList<Cliente>
+ setStatus(status : Status) : void
+ cancelarVoo() : void
+ atrasarVoo(minutos : Long) : void
+ confirmarVoo() : void
+ mudarPortao(novoPortao : String) : void
+ finalizarVoo() : void
+ notificarClientes(notificacao : String) : void
+ cadastrarCliente(cliente : Cliente) : String
+ removerCliente(cliente : Cliente) : String
+ toString() : String
}
class Atrasado{
- voo : Voo
+ Atrasado(voo : Voo)
+ proximoStatus(status : Status) : void
+ confirmarVoo() : void
+ atrasarVoo(minutos : Long) : void
+ cancelarVoo() : void
+ finalizarVoo() : void
+ mudarPortao(novoPortao : String) : void
}
Atrasado ..|> Status
class Finalizado{
- voo : Voo
+ Finalizado(voo : Voo)
+ proximoStatus(status : Status) : void
+ confirmarVoo() : void
+ atrasarVoo(minutos : Long) : void
+ cancelarVoo() : void
+ finalizarVoo() : void
+ mudarPortao(novoPortao : String) : void
}
Finalizado ..|> Status
class SmsStrategy{
+ notificar(mensagem : String) : void
+ toString() : String
}
SmsStrategy ..|> NotificadorStrategy
class Cliente{
- nome : String
- cpf : String
- notificador : Notificador
+ Cliente(nome : String, cpf : String)
+ definirNotificador(notificadorStrategy : NotificadorStrategy) : void
+ getNome() : String
+ getCpf() : String
+ receberNotificacao(notificacao : String) : void
+ toString() : String
}
Cliente ..|> Assinante
class Programado{
- voo : Voo
+ Programado(voo : Voo)
+ proximoStatus(status : Status) : void
+ confirmarVoo() : void
+ atrasarVoo(minutos : Long) : void
+ cancelarVoo() : void
+ finalizarVoo() : void
+ mudarPortao(novoPortao : String) : void
}
Programado ..|> Status
class PushStrategy{
+ notificar(mensagem : String) : void
+ toString() : String
}
PushStrategy ..|> NotificadorStrategy
class EmailStrategy{
+ notificar(mensagem : String) : void
+ toString() : String
}
EmailStrategy ..|> NotificadorStrategy
class Confirmado{
- voo : Voo
+ Confirmado(voo : Voo)
+ proximoStatus(status : Status) : void
+ confirmarVoo() : void
+ atrasarVoo(minutos : Long) : void
+ cancelarVoo() : void
+ finalizarVoo() : void
+ mudarPortao(novoPortao : String) : void
}
Confirmado ..|> Status
class main{
+ {static} main(args : String[]) : void
}
class Cancelado{
- voo : Voo
+ Cancelado(voo : Voo)
+ proximoStatus(status : Status) : void
+ confirmarVoo() : void
+ atrasarVoo(minutos : Long) : void
+ cancelarVoo() : void
+ finalizarVoo() : void
+ mudarPortao(novoPortao : String) : void
}
Cancelado ..|> Status
class Aeronave{
- tipo : String
- quantidadeDeAssentos : int
+ Aeronave(tipo : String, quantidadeDeAssentos : int)
+ getTipo() : String
+ getQuantidaDeAssentos() : int
+ toString() : String
}
MudancaPortao--"- voo" Voo
Notificador--"- notificadorStrategy" NotificadorStrategy
Voo--"- status" Status
Voo--"- aeronave" Aeronave
Atrasado--"- voo" Voo
Finalizado--"- voo" Voo
Cliente--"- notificador" Notificador
Programado--"- voo" Voo
Confirmado--"- voo" Voo
Cancelado--"- voo" Voo
interface Assinante{
+ receberNotificacao(notificacao : String) : void
}
interface Status{
+ proximoStatus(status : Status) : void
+ toString() : String
+ confirmarVoo() : void
+ cancelarVoo() : void
+ finalizarVoo() : void
+ mudarPortao(novoPortao : String) : void
+ atrasarVoo(minutos : Long) : void
}
interface NotificadorStrategy{
+ notificar(mensagem : String) : void
}
@enduml